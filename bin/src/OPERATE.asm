INCLUDE MACRO.ASM

PUBLIC _SELECT
PUBLIC _MOVE
PUBLIC _DELETE

EXTRN _GET_MOUSE_STATE:FAR
EXTRN _RESTORE_BLOCK:FAR
EXTRN _SAVE_BLOCK:FAR
EXTRN _DRAW_MOUSE:FAR
EXTRN _WRITE_BLOCK_PIXEL:FAR

GLOBAL SEGMENT PUBLIC
	EXTRN ON_LEFT_CLICK:WORD,ON_RIGHT_CLICK:WORD
	EXTRN MOUSE_BUF:BYTE,BUF:BYTE
	EXTRN CUR_X:WORD,CUR_Y:WORD,PRE_X:WORD,PRE_Y:WORD
	SELECTED    DB 00H
GLOBAL ENDS

PUBLIC SELECTED
DATA SEGMENT
	RECT_BUF    DB 4096 DUP(?)
	MOVE_BUF    DB 8192 DUP(?)
	START_X     DW ?  ;;选择块的起始坐标，不一定是左上角和右下角
	START_Y     DW ?
	END_X       DW ?
	END_Y       DW ?
	RECT_WIDTH  DW ?  ;;选择块的左上角,右下角坐标和宽度，高度
	RECT_HEIGHT DW ?
	RECT_X      DW ?
	RECT_Y      DW ?
	RECT_X1     DW ?
	RECT_Y1     DW ?
	X           DW ?
	Y           DW ?
DATA ENDS

CODE SEGMENT 
	ASSUME CS:CODE,ES:GLOBAL,DS:DATA
	
_SELECT PROC FAR
	PUSH AX
	PUSH DS
	PUSH ES
	
	MOV AX,GLOBAL
	MOV ES,AX
	MOV AX,DATA
	MOV DS,AX
	
	MOV AX,ES:CUR_X
	MOV START_X,AX
	MOV END_X,AX
	MOV AX,ES:CUR_Y
	MOV START_Y,AX
	MOV END_Y,AX
	
	__CLEAR_INPUT_BUF          ;选择前清除键盘缓存区 避免刚选择即删除
	__RESTORE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _DRAW_RECT
	__SAVE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _DRAW_MOUSE
SELECT_LOOP:
	CALL _GET_MOUSE_STATE
	CMP ES:ON_RIGHT_CLICK,1
	JZ SELECT_IS_COOR_CHANGED
	JMP SELECT_FINISH
	
SELECT_IS_COOR_CHANGED:
	MOV AX,ES:CUR_X
	CMP AX,END_X
	JNZ SELECT_IS_IN_RANGE
	MOV AX,ES:CUR_Y
	CMP AX,END_Y
	JZ  SELECT_LOOP
	
SELECT_IS_IN_RANGE:
	CMP ES:CUR_X,8
	JB SELECT_OUT_OF_RANGE
	CMP ES:CUR_X,536
	JAE SELECT_OUT_OF_RANGE
	CMP ES:CUR_Y,32
	JB SELECT_OUT_OF_RANGE
	CMP ES:CUR_Y,464
	JAE SELECT_OUT_OF_RANGE
	JMP SELECT_GO_ON
	
SELECT_OUT_OF_RANGE:
	JMP SELECT_FINISH
	
SELECT_GO_ON:
	__RESTORE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _RECT_RESTORE
	MOV AX,ES:CUR_X
	MOV END_X,AX
	MOV AX,ES:CUR_Y
	MOV END_Y,AX
	
	CALL _DRAW_RECT
	__SAVE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _DRAW_MOUSE
	JMP SELECT_LOOP
	
SELECT_FINISH:
	POP ES
	POP DS
	POP AX
	RET
_SELECT ENDP

_DRAW_RECT PROC NEAR
	__PUSH_REGS
	PUSH DS
	PUSH ES
	PUSH SI
	PUSH DI
	
	MOV AX,DATA
	MOV DS,AX
	MOV AX,GLOBAL
	MOV ES,AX
	LEA SI,RECT_BUF
	MOV AX,START_X
	MOV BX,END_X
	MOV CX,START_Y
	MOV DX,END_Y
	
	CMP AX,BX
	JB DRAW_RECT_1
	XCHG AX,BX
DRAW_RECT_1:
	PUSH AX
	ADD AX,2
	CMP AX,BX
	POP AX
	JBE DRAW_RECT_2
	JMP DRAW_RECT_FINISH
DRAW_RECT_2:
	CMP CX,DX
	JB DRAW_RECT_3
	XCHG CX,DX
DRAW_RECT_3:
	ADD CX,2
	CMP CX,DX
	JB DRAW_RECT_HORIZONTAL
	JMP DRAW_RECT_FINISH
	
DRAW_RECT_HORIZONTAL:        ;画水平线
	;;此处表示肯定画出选择块，因此置SELECTED为1，并计算选择块参数
	MOV ES:SELECTED,1           
	MOV RECT_X,AX
	MOV RECT_Y,CX
	MOV RECT_X1,BX
	MOV RECT_Y1,DX
	MOV RECT_WIDTH,BX
	SUB RECT_WIDTH,AX
	MOV RECT_HEIGHT,DX
	SUB RECT_HEIGHT,CX
	
	MOV DI,AX
DRAW_RECT_HORIZONTAL_LOOP:
	__READ_PIXEL DI,START_Y
	MOV [SI],AL
	INC SI
	__WRITE_PIXEL DI,START_Y,00H
	__READ_PIXEL DI,END_Y
	MOV [SI],AL
	INC SI
	__WRITE_PIXEL DI,END_Y,00H
	
	ADD DI,2
	CMP DI,BX
	JG DRAW_RECT_VERTICAL
	JMP DRAW_RECT_HORIZONTAL_LOOP
	
DRAW_RECT_VERTICAL:
	MOV DI,CX
DRAW_RECT_VERTICAL_LOOP:
	__READ_PIXEL START_X,DI
	MOV [SI],AL
	INC SI
	__WRITE_PIXEL START_X,DI,00H
	__READ_PIXEL END_X,DI
	MOV [SI],AL
	INC SI
	__WRITE_PIXEL END_X,DI,00H
	
	ADD DI,2
	CMP DI,DX
	JGE DRAW_RECT_FINISH
	JMP DRAW_RECT_VERTICAL_LOOP
	
DRAW_RECT_FINISH:
	POP DI
	POP SI
	POP ES
	POP DS
	__POP_REGS
	RET
_DRAW_RECT ENDP

_RECT_RESTORE PROC NEAR
	__PUSH_REGS
	PUSH DS
	PUSH ES
	PUSH SI
	PUSH DI
	
	MOV AX,DATA
	MOV DS,AX
	MOV AX,GLOBAL
	MOV ES,AX
	LEA SI,RECT_BUF
	MOV AX,START_X
	MOV BX,END_X
	MOV CX,START_Y
	MOV DX,END_Y
	
	CMP AX,BX
	JB RECT_RESTORE_1
	XCHG AX,BX
RECT_RESTORE_1:
	PUSH AX
	ADD AX,2
	CMP AX,BX
	POP AX
	JBE RECT_RESTORE_2
	JMP RECT_RESTORE_FINISH
RECT_RESTORE_2:
	CMP CX,DX
	JB RECT_RESTORE_3
	XCHG CX,DX
RECT_RESTORE_3:
	ADD CX,2
	CMP CX,DX
	JB RECT_RESTORE_HORIZONTAL
	JMP RECT_RESTORE_FINISH
	
RECT_RESTORE_HORIZONTAL:        
	MOV DI,AX
RECT_RESTORE_HORIZONTAL_LOOP:
	__WRITE_PIXEL DI,START_Y,[SI]
	INC SI
	__WRITE_PIXEL DI,END_Y,[SI]
	INC SI
	
	ADD DI,2
	CMP DI,BX
	JG RECT_RESTORE_VERTICAL
	JMP RECT_RESTORE_HORIZONTAL_LOOP
	
RECT_RESTORE_VERTICAL:
	MOV DI,CX
RECT_RESTORE_VERTICAL_LOOP:
	__WRITE_PIXEL START_X,DI,[SI]
	INC SI
	__WRITE_PIXEL END_X,DI,[SI]
	INC SI
	
	ADD DI,2
	CMP DI,DX
	JGE RECT_RESTORE_FINISH
	JMP RECT_RESTORE_VERTICAL_LOOP
	
RECT_RESTORE_FINISH:
	POP DI
	POP SI
	POP ES
	POP DS
	__POP_REGS
	RET
_RECT_RESTORE ENDP

_DELETE PROC FAR
	PUSH AX
	PUSH BX
	PUSH DS
	
	MOV AX,DATA
	MOV DS,AX
	MOV AH,01H
	INT 16H
	JZ DELETE_FINISH
	__CLEAR_INPUT_BUF
	CMP AL,100
	JNZ DELETE_FINISH
	;;删除选择块
	__RESTORE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _RECT_RESTORE
	__FILL_BY_PIXEL RECT_X,RECT_Y,RECT_WIDTH,RECT_HEIGHT,0FH
	__SAVE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _DRAW_MOUSE
	MOV ES:SELECTED,0
DELETE_FINISH:
	POP DS
	POP BX
	POP AX
	RET
_DELETE ENDP

_MOVE PROC FAR
	PUSH AX
	PUSH DS
	PUSH ES
	
	MOV AX,DATA
	MOV DS,AX
	MOV AX,GLOBAL
	MOV ES,AX
	;判断鼠标是否在选择框内，如果是则移动，否则取消选择框
	MOV AX,ES:CUR_X
	CMP AX,RECT_X
	JB MOVE_OUT_OF_RANGE
	CMP AX,RECT_X1
	JG MOVE_OUT_OF_RANGE
	MOV AX,ES:CUR_Y
	CMP AX,RECT_Y
	JB MOVE_OUT_OF_RANGE
	CMP AX,RECT_Y1
	JG MOVE_OUT_OF_RANGE
	JMP MOVE_IN_RANGE

MOVE_OUT_OF_RANGE:
	CALL _RECT_RESTORE
	MOV ES:SELECTED,0
	JMP MOVE_FINISH
	
MOVE_IN_RANGE:
	;;判断面积是否超出缓冲区
	MOV DX,0
	MOV AX,RECT_WIDTH
	MUL RECT_HEIGHT
	CMP DX,0
	JZ L1
	JMP MOVE_FINISH
L1:
	CMP AX,8192
	JBE BEGIN_MOVE
	JMP MOVE_FINISH
BEGIN_MOVE:
	MOV AX,ES:CUR_X
	MOV X,AX
	MOV AX,ES:CUR_Y
	MOV Y,AX
	
	__RESTORE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _RECT_RESTORE
	__SAVE_BLOCK RECT_X,RECT_Y,RECT_WIDTH,RECT_HEIGHT,MOVE_BUF
	__FILL_BY_PIXEL RECT_X,RECT_Y,RECT_WIDTH,RECT_HEIGHT,0FH
	__SAVE_BLOCK RECT_X,RECT_Y,RECT_WIDTH,RECT_HEIGHT,ES:BUF
	__RESTORE_BLOCK RECT_X,RECT_Y,RECT_WIDTH,RECT_HEIGHT,MOVE_BUF
	__SAVE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _DRAW_MOUSE
MOVE_LOOP:
	CALL _GET_MOUSE_STATE
	CMP ES:ON_LEFT_CLICK,1
	JZ MOVE_IS_OUT_OF_RANGE
	JMP MOVE_OK
	
MOVE_IS_OUT_OF_RANGE:
	CMP RECT_X,8
	JB MOVE_OUT_OF_RANGE1
	CMP RECT_X1,536
	JAE MOVE_OUT_OF_RANGE1
	CMP RECT_Y,32
	JB MOVE_OUT_OF_RANGE1
	CMP RECT_Y1,464
	JAE MOVE_OUT_OF_RANGE1
	JMP MOVE_IS_COOR_CHANGED
MOVE_OUT_OF_RANGE1:
	JMP MOVE_OK
	
MOVE_IS_COOR_CHANGED:
	MOV AX,ES:CUR_X
	CMP AX,X
	JNZ MOVE_GO_ON
	MOV AX,ES:CUR_Y
	CMP AX,Y
	JZ MOVE_LOOP

MOVE_GO_ON:
	__RESTORE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	;CALL _RECT_RESTORE
	__RESTORE_BLOCK RECT_X,RECT_Y,RECT_WIDTH,RECT_HEIGHT,ES:BUF
	
	MOV AX,ES:CUR_X
	SUB AX,X
	ADD RECT_X,AX
	ADD RECT_X1,AX
	ADD START_X,AX
	ADD END_X,AX
	
	MOV AX,ES:CUR_Y
	SUB AX,Y
	ADD RECT_Y,AX
	ADD RECT_Y1,AX
	ADD START_Y,AX
	ADD END_Y,AX
	
	MOV AX,ES:CUR_X
	MOV X,AX
	MOV AX,ES:CUR_Y
	MOV Y,AX
	
	__SAVE_BLOCK RECT_X,RECT_Y,RECT_WIDTH,RECT_HEIGHT,ES:BUF
	__RESTORE_BLOCK RECT_X,RECT_Y,RECT_WIDTH,RECT_HEIGHT,MOVE_BUF
	;CALL _DRAW_RECT
	__SAVE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	CALL _DRAW_MOUSE
	JMP MOVE_LOOP

MOVE_OK:
	; __RESTORE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	;CALL _DRAW_RECT
	MOV ES:SELECTED,0
	;__DELAY 33144
	; __SAVE_BLOCK ES:CUR_X,ES:CUR_Y,12,19,ES:MOUSE_BUF
	; CALL _DRAW_MOUSE
MOVE_FINISH:
	POP ES
	POP DS
	POP AX
	RET
_MOVE ENDP

CODE ENDS
END
